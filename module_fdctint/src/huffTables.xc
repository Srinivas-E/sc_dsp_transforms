// Copyright (c) 2011, XMOS Ltd, All rights reserved
// This software is freely distributable under a derivative of the
// University of Illinois/NCSA Open Source License posted in
// LICENSE.txt and at <http://github.xcore.com/>

#include <stdio.h>

int dcllength[12] = {2,3,3,3,3,3,4,5,6,7,8,9};
int dclcode[12] = {0b00,
                  0b010, 
                  0b011, 
                  0b100, 
                  0b101, 
                  0b110, 
                  0b1110, 
                  0b11110, 
                  0b111110, 
                  0b1111110, 
                  0b11111110, 
                  0b111111110 };

#ifdef COMPUTECODES
// CCITT Rec. T.81 (1992 E)
int aclength[16][16];
int accode[16][16];

void fill(int k, int l, int le, int co) {
    aclength[k][l] = le;
    accode[k][l] = co;
}

main() {
    int cnt  = 0b1111111110000010;
    fill(      0, 0, 4, 0b1010);
    fill(      0, 1, 2, 0b00);
    fill(      0, 2, 2, 0b01);
    fill(      0, 3, 3, 0b100);
    fill(      0, 4, 4, 0b1011);
    fill(      0, 5, 5, 0b11010);
    fill(      0, 6, 7, 0b1111000);
    fill(      0, 7, 8, 0b11111000);
    fill(      0, 8, 10, 0b1111110110);
    fill(      1, 1, 4, 0b1100);
    fill(      1, 2, 5, 0b11011);
    fill(      1, 3, 7, 0b1111001);
    fill(      1, 4, 9, 0b111110110);
    fill(      1, 5, 11, 0b11111110110);
    fill(      2, 1, 5,  0b11100);
    fill(      2, 2, 8,  0b11111001);
    fill(      2, 3, 10, 0b1111110111);
    fill(      2, 4, 12, 0b111111110100);
    fill(      3, 1, 6,  0b111010);
    fill(      3, 2, 9,  0b111110111);
    fill(      3, 3, 12, 0b111111110101);
    fill(      4, 1, 6,  0b111011);
    fill(      4, 2, 10, 0b1111111000);
    fill(      5, 1, 7,  0b1111010);
    fill(      5, 2, 11, 0b11111110111);
    fill(      6, 1, 7,  0b1111011);
    fill(      6, 2, 12, 0b111111110110);
    fill(      7, 1, 8,  0b11111010);
    fill(      7, 2, 12, 0b111111110111);
    fill(      8, 1, 9,  0b111111000);
    fill(      8, 2, 15, 0b111111111000000);
    fill(      9, 1, 9,  0b111111001);
    fill(     10, 1, 9,  0b111111010);
    fill(     11, 1, 10, 0b1111111001);
    fill(     12, 1, 10, 0b1111111010);
    fill(     13, 1, 11, 0b11111111000);
    fill(     15, 0, 11, 0b11111111001);
    for(int i = 0; i<16; i++) {
        for(int j = 1; j < 11; j++) {
            if (aclength[i][j] == 0) {
                fill(i, j, 16, cnt++);
            }
        }
    }
    for(int i = 0; i < 16; i++) {
        for(int j = 0; j < 11; j++) {
            int z = accode[i][j];
            printf("// %1x/%1x  %2d  ", i, j, aclength[i][j]);
            for(int k = aclength[i][j]-1; k >= 0; k--) {
                putchar(((z >> k) & 1) + '0');
            }
            putchar('\n');
        }
    }
    printf("char aclengths[160] = {\n");
    for(int j = 0; j < 11; j++) {
        for(int i = 0; i < 16; i++) {
            printf("%2d,", aclength[i][j]);
        }
        printf("\n");
    }
    printf("};\n");
    printf("short accodes[160] = {\n");
    for(int j = 0; j < 11; j++) {
        for(int i = 0; i < 16; i++) {
            printf("%4x,", accode[i][j]);
        }
        printf("\n");
    }
    printf("};\n");
}
#endif
// 0/0   4  1010
// 0/1   2  00
// 0/2   2  01
// 0/3   3  100
// 0/4   4  1011
// 0/5   5  11010
// 0/6   7  1111000
// 0/7   8  11111000
// 0/8  10  1111110110
// 0/9  16  1111111110000010
// 0/a  16  1111111110000011
// 1/0   0  
// 1/1   4  1100
// 1/2   5  11011
// 1/3   7  1111001
// 1/4   9  111110110
// 1/5  11  11111110110
// 1/6  16  1111111110000100
// 1/7  16  1111111110000101
// 1/8  16  1111111110000110
// 1/9  16  1111111110000111
// 1/a  16  1111111110001000
// 2/0   0  
// 2/1   5  11100
// 2/2   8  11111001
// 2/3  10  1111110111
// 2/4  12  111111110100
// 2/5  16  1111111110001001
// 2/6  16  1111111110001010
// 2/7  16  1111111110001011
// 2/8  16  1111111110001100
// 2/9  16  1111111110001101
// 2/a  16  1111111110001110
// 3/0   0  
// 3/1   6  111010
// 3/2   9  111110111
// 3/3  12  111111110101
// 3/4  16  1111111110001111
// 3/5  16  1111111110010000
// 3/6  16  1111111110010001
// 3/7  16  1111111110010010
// 3/8  16  1111111110010011
// 3/9  16  1111111110010100
// 3/a  16  1111111110010101
// 4/0   0  
// 4/1   6  111011
// 4/2  10  1111111000
// 4/3  16  1111111110010110
// 4/4  16  1111111110010111
// 4/5  16  1111111110011000
// 4/6  16  1111111110011001
// 4/7  16  1111111110011010
// 4/8  16  1111111110011011
// 4/9  16  1111111110011100
// 4/a  16  1111111110011101
// 5/0   0  
// 5/1   7  1111010
// 5/2  11  11111110111
// 5/3  16  1111111110011110
// 5/4  16  1111111110011111
// 5/5  16  1111111110100000
// 5/6  16  1111111110100001
// 5/7  16  1111111110100010
// 5/8  16  1111111110100011
// 5/9  16  1111111110100100
// 5/a  16  1111111110100101
// 6/0   0  
// 6/1   7  1111011
// 6/2  12  111111110110
// 6/3  16  1111111110100110
// 6/4  16  1111111110100111
// 6/5  16  1111111110101000
// 6/6  16  1111111110101001
// 6/7  16  1111111110101010
// 6/8  16  1111111110101011
// 6/9  16  1111111110101100
// 6/a  16  1111111110101101
// 7/0   0  
// 7/1   8  11111010
// 7/2  12  111111110111
// 7/3  16  1111111110101110
// 7/4  16  1111111110101111
// 7/5  16  1111111110110000
// 7/6  16  1111111110110001
// 7/7  16  1111111110110010
// 7/8  16  1111111110110011
// 7/9  16  1111111110110100
// 7/a  16  1111111110110101
// 8/0   0  
// 8/1   9  111111000
// 8/2  15  111111111000000
// 8/3  16  1111111110110110
// 8/4  16  1111111110110111
// 8/5  16  1111111110111000
// 8/6  16  1111111110111001
// 8/7  16  1111111110111010
// 8/8  16  1111111110111011
// 8/9  16  1111111110111100
// 8/a  16  1111111110111101
// 9/0   0  
// 9/1   9  111111001
// 9/2  16  1111111110111110
// 9/3  16  1111111110111111
// 9/4  16  1111111111000000
// 9/5  16  1111111111000001
// 9/6  16  1111111111000010
// 9/7  16  1111111111000011
// 9/8  16  1111111111000100
// 9/9  16  1111111111000101
// 9/a  16  1111111111000110
// a/0   0  
// a/1   9  111111010
// a/2  16  1111111111000111
// a/3  16  1111111111001000
// a/4  16  1111111111001001
// a/5  16  1111111111001010
// a/6  16  1111111111001011
// a/7  16  1111111111001100
// a/8  16  1111111111001101
// a/9  16  1111111111001110
// a/a  16  1111111111001111
// b/0   0  
// b/1  10  1111111001
// b/2  16  1111111111010000
// b/3  16  1111111111010001
// b/4  16  1111111111010010
// b/5  16  1111111111010011
// b/6  16  1111111111010100
// b/7  16  1111111111010101
// b/8  16  1111111111010110
// b/9  16  1111111111010111
// b/a  16  1111111111011000
// c/0   0  
// c/1  10  1111111010
// c/2  16  1111111111011001
// c/3  16  1111111111011010
// c/4  16  1111111111011011
// c/5  16  1111111111011100
// c/6  16  1111111111011101
// c/7  16  1111111111011110
// c/8  16  1111111111011111
// c/9  16  1111111111100000
// c/a  16  1111111111100001
// d/0   0  
// d/1  11  11111111000
// d/2  16  1111111111100010
// d/3  16  1111111111100011
// d/4  16  1111111111100100
// d/5  16  1111111111100101
// d/6  16  1111111111100110
// d/7  16  1111111111100111
// d/8  16  1111111111101000
// d/9  16  1111111111101001
// d/a  16  1111111111101010
// e/0   0  
// e/1  16  1111111111101011
// e/2  16  1111111111101100
// e/3  16  1111111111101101
// e/4  16  1111111111101110
// e/5  16  1111111111101111
// e/6  16  1111111111110000
// e/7  16  1111111111110001
// e/8  16  1111111111110010
// e/9  16  1111111111110011
// e/a  16  1111111111110100
// f/0  11  11111111001
// f/1  16  1111111111110101
// f/2  16  1111111111110110
// f/3  16  1111111111110111
// f/4  16  1111111111111000
// f/5  16  1111111111111001
// f/6  16  1111111111111010
// f/7  16  1111111111111011
// f/8  16  1111111111111100
// f/9  16  1111111111111101
// f/a  16  1111111111111110
char aclengths[160] = {
 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,11,
 2, 4, 5, 6, 6, 7, 7, 8, 9, 9, 9,10,10,11,16,16,
 2, 5, 8, 9,10,11,12,12,15,16,16,16,16,16,16,16,
 3, 7,10,12,16,16,16,16,16,16,16,16,16,16,16,16,
 4, 9,12,16,16,16,16,16,16,16,16,16,16,16,16,16,
 5,11,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
 7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
 8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
};
short accodes[160] = {
   a,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 7f9,
   0,   c,  1c,  3a,  3b,  7a,  7b,  fa, 1f8, 1f9, 1fa, 3f9, 3fa, 7f8,ffeb,fff5,
   1,  1b,  f9, 1f7, 3f8, 7f7, ff6, ff7,7fc0,ffbe,ffc7,ffd0,ffd9,ffe2,ffec,fff6,
   4,  79, 3f7, ff5,ff96,ff9e,ffa6,ffae,ffb6,ffbf,ffc8,ffd1,ffda,ffe3,ffed,fff7,
   b, 1f6, ff4,ff8f,ff97,ff9f,ffa7,ffaf,ffb7,ffc0,ffc9,ffd2,ffdb,ffe4,ffee,fff8,
  1a, 7f6,ff89,ff90,ff98,ffa0,ffa8,ffb0,ffb8,ffc1,ffca,ffd3,ffdc,ffe5,ffef,fff9,
  78,ff84,ff8a,ff91,ff99,ffa1,ffa9,ffb1,ffb9,ffc2,ffcb,ffd4,ffdd,ffe6,fff0,fffa,
  f8,ff85,ff8b,ff92,ff9a,ffa2,ffaa,ffb2,ffba,ffc3,ffcc,ffd5,ffde,ffe7,fff1,fffb,
 3f6,ff86,ff8c,ff93,ff9b,ffa3,ffab,ffb3,ffbb,ffc4,ffcd,ffd6,ffdf,ffe8,fff2,fffc,
ff82,ff87,ff8d,ff94,ff9c,ffa4,ffac,ffb4,ffbc,ffc5,ffce,ffd7,ffe0,ffe9,fff3,fffd,
ff83,ff88,ff8e,ff95,ff9d,ffa5,ffad,ffb5,ffbd,ffc6,ffcf,ffd8,ffe1,ffea,fff4,fffe,
 };
